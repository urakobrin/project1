class InfoMessage:
    """Информационное сообщение о тренировке."""
    def __init__(
            self,
            training_type: str,
            duration: float,
            distance: float,
            speed: float,
            calories: float
    ) -> None:
        self.training_type = training_type
        self.duration = duration
        self.distance = distance
        self.speed = speed
        self.calories = calories

    def get_message(self): 
        return (
            f'Тип тренировки: {self.training_type}; '
            f'Длительность: {self.duration:.3f} ч.; '
            f'Дистанция: {self.distance:.3f} км; '
            f'Ср. скорость: {self.speed:.3f} км/ч; '
            f'Потрачено ккал: {self.calories:.3f}.'
        ) 


class Training:
    """Базовый класс тренировки."""
    M_IN_KM: int = 1000
    LEN_STEP: int = 0.65

    def __init__(
            self,
            action: int,
            duration: float,
            weight: float,
    ) -> None:
        self.action = action
        self.duration = duration
        self.weight = weight
        
    def get_distance(self) -> float:
        """Получить дистанцию в км."""
        return self.action * self.LEN_STEP / self.M_IN_KM 

    def get_mean_speed(self) -> float:
        """Получить среднюю скорость движения."""
        return self.get_distance() / self.duration

    def get_spent_calories(self) -> float:
        """Получить количество затраченных калорий."""
        pass

    def show_training_info(self) -> InfoMessage:
        """Вернуть информационное сообщение о выполненной тренировке."""
        return InfoMessage(
            self.__class__.__name__,
            self.duration,
            self.get_distance(),
            self.get_mean_speed(),
            self.get_spent_calories()
        )


class Running(Training):
    """Тренировка: бег."""
    CALORIES_MEAN_SPEED_MULTIPLIER: int = 18
    CALORIES_MEAN_SPEED_SHIFT: float = 1.79
    MIN: int = 60

    def get_spent_calories(self):
        return (
            (self.CALORIES_MEAN_SPEED_MULTIPLIER
             * self.get_mean_speed() + self.CALORIES_MEAN_SPEED_SHIFT)
            * self.weight / self.M_IN_KM * self.duration * self.MIN
        )


class SportsWalking(Training):
    """Тренировка: спортивная ходьба."""
    MIN: int = 60
    H_IN_M: int = 60
    KOF0: float = 0.035
    KOF1: float = 0.029

    def __init__(
            self,
            action: int,
            duration: float,
            weight: float,
            height: float
    ) -> None:
        super().__init__(action, duration, weight)
        self.height = height
    
    def get_spent_calories(self) -> float:
        return (
            (self.KOF0 * self.weight + ((self.get_mean_speed()
             * self.H_IN_M) ** 2 / self.height)
            * self.KOF1 * self.weight) * self.duration * self.MIN
        )

        
class Swimming(Training):
    """Тренировка: плавание."""
    LEN_STEP: int = 1.38
    KOF0: float = 1.1
    KOF1: int = 2

    def __init__(
            self, 
            action: int,
            duration: float,
            weight: float,
            length_pool: float,
            count_pool: int
    ) -> None:
        super().__init__(action, duration, weight)
        self.length_pool = length_pool
        self.count_pool = count_pool
        
        def get_mean_speed(self) -> float:
            return self.length_pool * self.count_pool / self.M_IN_KM / self.duration

        def get_spent_calories(self) -> float:
            return (
                (self.get_mean_speed() + self.KOF0) 
                 * self.KOF1 * self.weight * self.duration
            )

def read_package(workout_type: str, data: list) -> Training:
    """Прочитать данные полученные от датчиков."""
    pop = {
        'SWM': Swimming,
        'RUN':Running,
        'WLK': SportsWalking
    }

    if workout_type in pop:
        return pop[workout_type](*data)
    if workout_type not in pop:
        raise KeyError('Указан неверный код тенировки')


def main(training: Training) -> None:
    """Главная функция."""
    info: InfoMessage = training.show_training_info()
    print(info.get_message())


if __name__ == '__main__':
    packages = [
        ('SWM', [720, 1, 80, 25, 40]),
        ('RUN', [15000, 1, 75]),
        ('WLK', [9000, 1, 75, 180]),
    ]

    for workout_type, data in packages:
        training = read_package(workout_type, data)
        main(training)
